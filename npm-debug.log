0 info it worked if it ends with ok
1 verbose cli [ '/home/shant/.nvm/v0.11.14/bin/node',
1 verbose cli   '/home/shant/.nvm/v0.11.14/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@2.0.0
3 info using node@v0.11.14
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add spec="." args=[".",null]
7 verbose parsed spec { raw: '.',
7 verbose parsed spec   scope: null,
7 verbose parsed spec   name: null,
7 verbose parsed spec   rawSpec: '.',
7 verbose parsed spec   spec: '/home/shant/keymetrics/pm2-axon',
7 verbose parsed spec   type: 'local' }
8 verbose cache add local package /home/shant/keymetrics/pm2-axon
9 silly lockFile 3a52ce78- .
10 verbose lock . /home/shant/.npm/3a52ce78-.lock
11 verbose tar pack [ '/home/shant/.npm/pm2-axon/2.0.5/package.tgz', '.' ]
12 verbose tarball /home/shant/.npm/pm2-axon/2.0.5/package.tgz
13 verbose folder .
14 info prepublish pm2-axon@2.0.5
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /home/shant/.npm/1f1177db-tar.lock
17 silly lockFile 55114f40-t-npm-pm2-axon-2-0-5-package-tgz tar:///home/shant/.npm/pm2-axon/2.0.5/package.tgz
18 verbose lock tar:///home/shant/.npm/pm2-axon/2.0.5/package.tgz /home/shant/.npm/55114f40-t-npm-pm2-axon-2-0-5-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 55114f40-t-npm-pm2-axon-2-0-5-package-tgz tar:///home/shant/.npm/pm2-axon/2.0.5/package.tgz
22 silly lockFile 55114f40-t-npm-pm2-axon-2-0-5-package-tgz tar:///home/shant/.npm/pm2-axon/2.0.5/package.tgz
23 silly lockFile ddfa7fa8-shant-npm-pm2-axon-2-0-5-package /home/shant/.npm/pm2-axon/2.0.5/package
24 verbose lock /home/shant/.npm/pm2-axon/2.0.5/package /home/shant/.npm/ddfa7fa8-shant-npm-pm2-axon-2-0-5-package.lock
25 silly lockFile ddfa7fa8-shant-npm-pm2-axon-2-0-5-package /home/shant/.npm/pm2-axon/2.0.5/package
26 silly lockFile ddfa7fa8-shant-npm-pm2-axon-2-0-5-package /home/shant/.npm/pm2-axon/2.0.5/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'pm2-axon',
29 silly publish   description: 'High-level messaging & socket patterns implemented in pure js',
29 silly publish   version: '2.0.5',
29 silly publish   author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
29 silly publish   dependencies:
29 silly publish    { debug: '~2.0.0',
29 silly publish      configurable: '0.0.1',
29 silly publish      'escape-regexp': '0.0.1',
29 silly publish      'amp-message': '~0.1.1',
29 silly publish      amp: '~0.3.1' },
29 silly publish   devDependencies:
29 silly publish    { 'better-assert': '*',
29 silly publish      should: '*',
29 silly publish      mocha: '*',
29 silly publish      commander: '*',
29 silly publish      'humanize-number': '0.0.1' },
29 silly publish   keywords: [ 'zmq', 'zeromq', 'pubsub', 'socket', 'emitter', 'ipc', 'rpc' ],
29 silly publish   repository: { type: 'git', url: 'https://github.com/visionmedia/axon.git' },
29 silly publish   scripts: { test: 'make test' },
29 silly publish   license: 'MIT',
29 silly publish   readme: '# Axon\n\n  Axon is a message-oriented socket library for node.js heavily inspired by zeromq. For a light-weight\n  UDP alternative you may be interested in [punt](https://github.com/visionmedia/punt).\n\n[![Build Status](https://travis-ci.org/unitech/pm2-axon.png)](https://travis-ci.org/unitech/pm2-axon)\n\n## Installation\n\n    $ npm install axon\n\n## Features\n\n  - message oriented\n  - automated reconnection\n  - light-weight wire protocol\n  - mixed-type arguments (strings, objects, buffers, etc)\n  - unix domain socket support\n  - fast (~800 mb/s ~500,000 messages/s)\n\n## Events\n\n  - `close` when server or connection is closed\n  - `error` (err) when an un-handled socket error occurs\n  - `ignored error` (err) when an axon-handled socket error occurs, but is ignored\n  - `socket error` (err) emitted regardless of handling, for logging purposes\n  - `reconnect attempt` when a reconnection attempt is made\n  - `connect` when connected to the peer, or a peer connection is accepted\n  - `disconnect` when an accepted peer disconnects\n  - `bind` when the server is bound\n  - `drop` (msg) when a message is dropped due to the HWM\n  - `flush` (msgs) queued when messages are flushed on connection\n\n## Patterns\n\n  - push / pull\n  - pub / sub\n  - req / rep\n  - pub-emitter / sub-emitter\n\n## Mixed argument types\n\n  Backed by [node-amp-message](https://github.com/visionmedia/node-amp-message)\n  you may pass strings, objects, and buffers as arguments.\n\n```js\npush.send(\'image\', { w: 100, h: 200 }, imageBuffer);\npull.on(\'message\', function(type, size, img){});\n```\n\n## Push / Pull\n\n`PushSocket`s distribute messages round-robin:\n\n```js\nvar axon = require(\'axon\');\nvar sock = axon.socket(\'push\');\n\nsock.bind(3000);\nconsole.log(\'push server started\');\n\nsetInterval(function(){\n  sock.send(\'hello\');\n}, 150);\n```\n\nReceiver of `PushSocket` messages:\n\n```js\nvar axon = require(\'axon\');\nvar sock = axon.socket(\'pull\');\n\nsock.connect(3000);\n\nsock.on(\'message\', function(msg){\n  console.log(msg.toString());\n});\n```\n\n\nBoth `PushSocket`s and `PullSocket`s may `.bind()` or `.connect()`. In the\nfollowing configuration the push socket is bound and pull "workers" connect\nto it to receive work:\n\n![push bind](http://f.cl.ly/items/473u3m1a0k1i0J0I3s04/ss-push.png)\n\nThis configuration shows the inverse, where workers connect to a "sink"\nto push results:\n\n![pull bind](http://f.cl.ly/items/3Y0j2v153Q0l1r373i0H/ss-pull.png)\n\n## Pub / Sub\n\n`PubSocket`s send messages to all subscribers without queueing. This is an\nimportant difference when compared to a `PushSocket`, where the delivery of\nmessages will be queued during disconnects and sent again upon the next connection.\n\n```js\nvar axon = require(\'axon\');\nvar sock = axon.socket(\'pub\');\n\nsock.bind(3000);\nconsole.log(\'pub server started\');\n\nsetInterval(function(){\n  sock.send(\'hello\');\n}, 500);\n```\n\n`SubSocket` simply receives any messages from a `PubSocket`:\n\n```js\nvar axon = require(\'axon\');\nvar sock = axon.socket(\'sub\');\n\nsock.connect(3000);\n\nsock.on(\'message\', function(msg){\n  console.log(msg.toString());\n});\n```\n\n `SubSocket`s may optionally `.subscribe()` to one or more "topics" (the first multipart value),\n using string patterns or regular expressions:\n\n```js\nvar axon = require(\'axon\');\nvar sock = axon.socket(\'sub\');\n\nsock.connect(3000);\nsock.subscribe(\'user:login\');\nsock.subscribe(\'upload:*:progress\');\n\nsock.on(\'message\', function(topic, msg){\n\n});\n```\n\n## Req / Rep\n\n`ReqSocket` is similar to a `PushSocket` in that it round-robins messages\nto connected `RepSocket`s, however it differs in that this communication is\nbi-directional, every `req.send()` _must_ provide a callback which is invoked\nwhen the `RepSocket` replies.\n\n```js\nvar axon = require(\'axon\');\nvar sock = axon.socket(\'req\');\n\nsock.bind(3000);\n\nsock.send(img, function(res){\n\n});\n```\n\n`RepSocket`s receive a `reply` callback that is used to respond to the request,\nyou may have several of these nodes.\n\n```js\nvar axon = require(\'axon\');\nvar sock = axon.socket(\'rep\');\n\nsock.connect(3000);\n\nsock.on(\'message\', function(img, reply){\n  // resize the image\n  reply(img);\n});\n```\n\n Like other sockets you may provide multiple arguments or an array of arguments,\n followed by the callbacks. For example here we provide a task name of "resize"\n to facilitate multiple tasks over a single socket:\n\n```js\nvar axon = require(\'axon\');\nvar sock = axon.socket(\'req\');\n\nsock.bind(3000);\n\nsock.send(\'resize\', img, function(res){\n\n});\n```\n\n Respond to the "resize" task:\n\n```js\nvar axon = require(\'axon\');\nvar sock = axon.socket(\'rep\');\n\nsock.connect(3000);\n\nsock.on(\'message\', function(task, img, reply){\n  switch (task) {\n    case \'resize\':\n      // resize the image\n      reply(img);\n      break;\n  }\n});\n```\n\n## PubEmitter / SubEmitter\n\n  `PubEmitter` and `SubEmitter` are higher-level `Pub` / `Sub` sockets, using the "json" codec to behave much like node\'s `EventEmitter`. When a `SubEmitter`\'s `.on()` method is invoked, the event name is `.subscribe()`d for you. Each wildcard (`*`) or regexp capture group is passed to the callback along with regular message arguments.\n\napp.js:\n\n```js\nvar axon = require(\'axon\');\nvar sock = axon.socket(\'pub-emitter\');\n\nsock.connect(3000);\n\nsetInterval(function(){\n  sock.emit(\'login\', { name: \'tobi\' });\n}, 500);\n```\n\nlogger.js:\n\n```js\nvar axon = require(\'axon\');\nvar sock = axon.socket(\'sub-emitter\');\n\nsock.bind(3000);\n\nsock.on(\'user:login\', function(user){\n  console.log(\'%s signed in\', user.name);\n});\n\nsock.on(\'user:*\', function(action, user){\n  console.log(\'%s %s\', user.name, action);\n});\n\nsock.on(\'*\', function(event){\n  console.log(arguments);\n});\n```\n\n## Socket Options\n\nEvery socket has associated options that can be configured via `get/set`.\n\n  - `identity` - the "name" of the socket that uniqued identifies it.\n  - `retry timeout` - connection retry timeout in milliseconds [100]\n  - `retry max timeout` - the cap for retry timeout length in milliseconds [5000]\n  - `hwm` - the high water mark threshold for queues [Infinity]\n\n## Binding / Connecting\n\nIn addition to passing a portno, binding to INADDR_ANY by default, you\nmay also specify the hostname via `.bind(port, host)`, another alternative\nis to specify the url much like zmq via `tcp://<hostname>:<portno>`, thus\nthe following are equivalent:\n\n```\nsock.bind(3000)\nsock.bind(3000, \'0.0.0.0\')\nsock.bind(\'tcp://0.0.0.0:3000\')\n\nsock.connect(3000)\nsock.connect(3000, \'0.0.0.0\')\nsock.connect(\'tcp://0.0.0.0:3000\')\n```\n\n  You may also use unix domain sockets:\n\n```\nsock.bind(\'unix:///some/path\')\nsock.connect(\'unix:///some/path\')\n```\n\n## Protocol\n\n  Axon 2.x uses the extremely simple [AMP](https://github.com/visionmedia/node-amp) protocol to send messages on the wire. Codecs are no longer required as they were in Axon 1.x.\n\n## Performance\n\nPreliminary benchmarks on my Macbook Pro based on 10 messages\nper tick as a realistic production application would likely have\neven less than this. "better" numbers may be acheived with batching\nand a larger messages/tick count however this is not realistic.\n\n  64 byte messages:\n\n```\n\n      min: 47,169 ops/s\n     mean: 465,127 ops/s\n   median: 500,000 ops/s\n    total: 2,325,636 ops in 5s\n  through: 28.39 mb/s\n\n```\n\n  1k messages:\n\n```\n\n      min: 48,076 ops/s\n     mean: 120,253 ops/s\n   median: 121,951 ops/s\n    total: 601,386 ops in 5.001s\n  through: 117.43 mb/s\n\n```\n\n  8k messages:\n\n```\n\n      min: 36,496 ops/s\n     mean: 53,194 ops/s\n   median: 50,505 ops/s\n    total: 266,506 ops in 5.01s\n  through: 405.84 mb/s\n\n````\n\n  32k messages:\n\n```\n\n      min: 12,077 ops/s\n     mean: 14,792 ops/s\n   median: 16,233 ops/s\n    total: 74,186 ops in 5.015s\n  through: 462.28 mb/s\n\n```\n\n## What\'s it good for?\n\n  Axon are not meant to combat zeromq nor provide feature parity,\n  but provide a nice solution when you don\'t need the insane\n  nanosecond latency or language interoperability that zeromq provides\n  as axon do not rely on any third-party compiled libraries.\n\n## Running tests\n\n```\n$ npm install\n$ make test\n```\n\n## Authors\n\n  - [visionmedia](http://github.com/visionmedia)\n  - [gjohnson](https://github.com/gjohnson)\n\n## Links\n\n  - [Screencast](https://vimeo.com/45818408)\n  - [Axon RPC](https://github.com/visionmedia/axon-rpc)\n\n## License\n\n  MIT\n',
29 silly publish   readmeFilename: 'Readme.md',
29 silly publish   gitHead: 'c1b8d0cd39d4f546ce954094dbb441ae4effd00d',
29 silly publish   bugs: { url: 'https://github.com/visionmedia/axon/issues' },
29 silly publish   homepage: 'https://github.com/visionmedia/axon',
29 silly publish   _id: 'pm2-axon@2.0.5',
29 silly publish   _shasum: '6535c37443e87fc5a4dbaf978f9ce27c43045ce1',
29 silly publish   _from: '.' }
30 verbose mapToRegistry name pm2-axon
31 verbose mapToRegistry uri https://registry.npmjs.org/pm2-axon
32 verbose publish registryBase https://registry.npmjs.org/
33 verbose request on initialization, where is /pm2-axon
34 verbose request after pass 1, where is /pm2-axon
35 verbose request url raw /pm2-axon
36 verbose request resolving registry [ 'https://registry.npmjs.org/', './pm2-axon' ]
37 verbose request after pass 2, where is https://registry.npmjs.org/pm2-axon
38 verbose request sending authorization for write operation
39 info attempt registry request try #1 at 14:18:19
40 verbose request id 6ad571a1ccddb08a
41 http request PUT https://registry.npmjs.org/pm2-axon
42 http 403 https://registry.npmjs.org/pm2-axon
43 verbose headers { date: 'Tue, 30 Sep 2014 12:18:19 GMT',
43 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
43 verbose headers   'content-type': 'application/json',
43 verbose headers   'cache-control': 'max-age=60',
43 verbose headers   'content-length': '13174',
43 verbose headers   'accept-ranges': 'bytes',
43 verbose headers   via: '1.1 varnish',
43 verbose headers   'x-served-by': 'cache-lo81-LHR',
43 verbose headers   'x-cache': 'MISS',
43 verbose headers   'x-cache-hits': '0',
43 verbose headers   'x-timer': 'S1412079499.362077,VS0,VE464',
43 verbose headers   connection: 'close' }
44 error publish Failed PUT 403
45 verbose stack Error: forbidden cannot modify pre-existing version: 2.0.5
45 verbose stack old={"name":"pm2-axon","description":"High-level messaging & socket patterns implemented in pure js","version":"2.0.5","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"debug":"~2.0.0","configurable":"0.0.1","escape-regexp":"0.0.1","amp-message":"~0.1.1","amp":"~0.3.1"},"devDependencies":{"better-assert":"*","should":"*","mocha":"*","commander":"*","humanize-number":"0.0.1"},"keywords":["zmq","zeromq","pubsub","socket","emitter","ipc","rpc"],"repository":{"type":"git","url":"https://github.com/visionmedia/axon.git"},"scripts":{"test":"make test"},"license":"MIT","gitHead":"c1b8d0cd39d4f546ce954094dbb441ae4effd00d","bugs":{"url":"https://github.com/visionmedia/axon/issues"},"homepage":"https://github.com/visionmedia/axon","_id":"pm2-axon@2.0.5","_shasum":"6535c37443e87fc5a4dbaf978f9ce27c43045ce1","_from":".","_npmVersion":"2.0.0","_npmUser":{"name":"tknew","email":"strzelewicz.alexandre@gmail.com"},"maintainers":[{"name":"tknew","email":"strzelewicz.alexandre@gmail.com"}],"dist":{"shasum":"6535c37443e87fc5a4dbaf978f9ce27c43045ce1","tarball":"http://registry.npmjs.org/pm2-axon/-/pm2-axon-2.0.5.tgz"}}
45 verbose stack new={"name":"pm2-axon","description":"High-level messaging & socket patterns implemented in pure js","version":"2.0.5","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"debug":"~2.0.0","configurable":"0.0.1","escape-regexp":"0.0.1","amp-message":"~0.1.1","amp":"~0.3.1"},"devDependencies":{"better-assert":"*","should":"*","mocha":"*","commander":"*","humanize-number":"0.0.1"},"keywords":["zmq","zeromq","pubsub","socket","emitter","ipc","rpc"],"repository":{"type":"git","url":"https://github.com/visionmedia/axon.git"},"scripts":{"test":"make test"},"license":"MIT","readme":"# Axon\u000a\u000a  Axon is a message-oriented socket library for node.js heavily inspired by zeromq. For a light-weight\u000a  UDP alternative you may be interested in [punt](https://github.com/visionmedia/punt).\u000a\u000a[![Build Status](https://travis-ci.org/unitech/pm2-axon.png)](https://travis-ci.org/unitech/pm2-axon)\u000a\u000a## Installation\u000a\u000a    $ npm install axon\u000a\u000a## Features\u000a\u000a  - message oriented\u000a  - automated reconnection\u000a  - light-weight wire protocol\u000a  - mixed-type arguments (strings, objects, buffers, etc)\u000a  - unix domain socket support\u000a  - fast (~800 mb/s ~500,000 messages/s)\u000a\u000a## Events\u000a\u000a  - `close` when server or connection is closed\u000a  - `error` (err) when an un-handled socket error occurs\u000a  - `ignored error` (err) when an axon-handled socket error occurs, but is ignored\u000a  - `socket error` (err) emitted regardless of handling, for logging purposes\u000a  - `reconnect attempt` when a reconnection attempt is made\u000a  - `connect` when connected to the peer, or a peer connection is accepted\u000a  - `disconnect` when an accepted peer disconnects\u000a  - `bind` when the server is bound\u000a  - `drop` (msg) when a message is dropped due to the HWM\u000a  - `flush` (msgs) queued when messages are flushed on connection\u000a\u000a## Patterns\u000a\u000a  - push / pull\u000a  - pub / sub\u000a  - req / rep\u000a  - pub-emitter / sub-emitter\u000a\u000a## Mixed argument types\u000a\u000a  Backed by [node-amp-message](https://github.com/visionmedia/node-amp-message)\u000a  you may pass strings, objects, and buffers as arguments.\u000a\u000a```js\u000apush.send('image', { w: 100, h: 200 }, imageBuffer);\u000apull.on('message', function(type, size, img){});\u000a```\u000a\u000a## Push / Pull\u000a\u000a`PushSocket`s distribute messages round-robin:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('push');\u000a\u000asock.bind(3000);\u000aconsole.log('push server started');\u000a\u000asetInterval(function(){\u000a  sock.send('hello');\u000a}, 150);\u000a```\u000a\u000aReceiver of `PushSocket` messages:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('pull');\u000a\u000asock.connect(3000);\u000a\u000asock.on('message', function(msg){\u000a  console.log(msg.toString());\u000a});\u000a```\u000a\u000a\u000aBoth `PushSocket`s and `PullSocket`s may `.bind()` or `.connect()`. In the\u000afollowing configuration the push socket is bound and pull \"workers\" connect\u000ato it to receive work:\u000a\u000a![push bind](http://f.cl.ly/items/473u3m1a0k1i0J0I3s04/ss-push.png)\u000a\u000aThis configuration shows the inverse, where workers connect to a \"sink\"\u000ato push results:\u000a\u000a![pull bind](http://f.cl.ly/items/3Y0j2v153Q0l1r373i0H/ss-pull.png)\u000a\u000a## Pub / Sub\u000a\u000a`PubSocket`s send messages to all subscribers without queueing. This is an\u000aimportant difference when compared to a `PushSocket`, where the delivery of\u000amessages will be queued during disconnects and sent again upon the next connection.\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('pub');\u000a\u000asock.bind(3000);\u000aconsole.log('pub server started');\u000a\u000asetInterval(function(){\u000a  sock.send('hello');\u000a}, 500);\u000a```\u000a\u000a`SubSocket` simply receives any messages from a `PubSocket`:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('sub');\u000a\u000asock.connect(3000);\u000a\u000asock.on('message', function(msg){\u000a  console.log(msg.toString());\u000a});\u000a```\u000a\u000a `SubSocket`s may optionally `.subscribe()` to one or more \"topics\" (the first multipart value),\u000a using string patterns or regular expressions:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('sub');\u000a\u000asock.connect(3000);\u000asock.subscribe('user:login');\u000asock.subscribe('upload:*:progress');\u000a\u000asock.on('message', function(topic, msg){\u000a\u000a});\u000a```\u000a\u000a## Req / Rep\u000a\u000a`ReqSocket` is similar to a `PushSocket` in that it round-robins messages\u000ato connected `RepSocket`s, however it differs in that this communication is\u000abi-directional, every `req.send()` _must_ provide a callback which is invoked\u000awhen the `RepSocket` replies.\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('req');\u000a\u000asock.bind(3000);\u000a\u000asock.send(img, function(res){\u000a\u000a});\u000a```\u000a\u000a`RepSocket`s receive a `reply` callback that is used to respond to the request,\u000ayou may have several of these nodes.\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('rep');\u000a\u000asock.connect(3000);\u000a\u000asock.on('message', function(img, reply){\u000a  // resize the image\u000a  reply(img);\u000a});\u000a```\u000a\u000a Like other sockets you may provide multiple arguments or an array of arguments,\u000a followed by the callbacks. For example here we provide a task name of \"resize\"\u000a to facilitate multiple tasks over a single socket:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('req');\u000a\u000asock.bind(3000);\u000a\u000asock.send('resize', img, function(res){\u000a\u000a});\u000a```\u000a\u000a Respond to the \"resize\" task:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('rep');\u000a\u000asock.connect(3000);\u000a\u000asock.on('message', function(task, img, reply){\u000a  switch (task) {\u000a    case 'resize':\u000a      // resize the image\u000a      reply(img);\u000a      break;\u000a  }\u000a});\u000a```\u000a\u000a## PubEmitter / SubEmitter\u000a\u000a  `PubEmitter` and `SubEmitter` are higher-level `Pub` / `Sub` sockets, using the \"json\" codec to behave much like node's `EventEmitter`. When a `SubEmitter`'s `.on()` method is invoked, the event name is `.subscribe()`d for you. Each wildcard (`*`) or regexp capture group is passed to the callback along with regular message arguments.\u000a\u000aapp.js:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('pub-emitter');\u000a\u000asock.connect(3000);\u000a\u000asetInterval(function(){\u000a  sock.emit('login', { name: 'tobi' });\u000a}, 500);\u000a```\u000a\u000alogger.js:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('sub-emitter');\u000a\u000asock.bind(3000);\u000a\u000asock.on('user:login', function(user){\u000a  console.log('%s signed in', user.name);\u000a});\u000a\u000asock.on('user:*', function(action, user){\u000a  console.log('%s %s', user.name, action);\u000a});\u000a\u000asock.on('*', function(event){\u000a  console.log(arguments);\u000a});\u000a```\u000a\u000a## Socket Options\u000a\u000aEvery socket has associated options that can be configured via `get/set`.\u000a\u000a  - `identity` - the \"name\" of the socket that uniqued identifies it.\u000a  - `retry timeout` - connection retry timeout in milliseconds [100]\u000a  - `retry max timeout` - the cap for retry timeout length in milliseconds [5000]\u000a  - `hwm` - the high water mark threshold for queues [Infinity]\u000a\u000a## Binding / Connecting\u000a\u000aIn addition to passing a portno, binding to INADDR_ANY by default, you\u000amay also specify the hostname via `.bind(port, host)`, another alternative\u000ais to specify the url much like zmq via `tcp://<hostname>:<portno>`, thus\u000athe following are equivalent:\u000a\u000a```\u000asock.bind(3000)\u000asock.bind(3000, '0.0.0.0')\u000asock.bind('tcp://0.0.0.0:3000')\u000a\u000asock.connect(3000)\u000asock.connect(3000, '0.0.0.0')\u000asock.connect('tcp://0.0.0.0:3000')\u000a```\u000a\u000a  You may also use unix domain sockets:\u000a\u000a```\u000asock.bind('unix:///some/path')\u000asock.connect('unix:///some/path')\u000a```\u000a\u000a## Protocol\u000a\u000a  Axon 2.x uses the extremely simple [AMP](https://github.com/visionmedia/node-amp) protocol to send messages on the wire. Codecs are no longer required as they were in Axon 1.x.\u000a\u000a## Performance\u000a\u000aPreliminary benchmarks on my Macbook Pro based on 10 messages\u000aper tick as a realistic production application would likely have\u000aeven less than this. \"better\" numbers may be acheived with batching\u000aand a larger messages/tick count however this is not realistic.\u000a\u000a  64 byte messages:\u000a\u000a```\u000a\u000a      min: 47,169 ops/s\u000a     mean: 465,127 ops/s\u000a   median: 500,000 ops/s\u000a    total: 2,325,636 ops in 5s\u000a  through: 28.39 mb/s\u000a\u000a```\u000a\u000a  1k messages:\u000a\u000a```\u000a\u000a      min: 48,076 ops/s\u000a     mean: 120,253 ops/s\u000a   median: 121,951 ops/s\u000a    total: 601,386 ops in 5.001s\u000a  through: 117.43 mb/s\u000a\u000a```\u000a\u000a  8k messages:\u000a\u000a```\u000a\u000a      min: 36,496 ops/s\u000a     mean: 53,194 ops/s\u000a   median: 50,505 ops/s\u000a    total: 266,506 ops in 5.01s\u000a  through: 405.84 mb/s\u000a\u000a````\u000a\u000a  32k messages:\u000a\u000a```\u000a\u000a      min: 12,077 ops/s\u000a     mean: 14,792 ops/s\u000a   median: 16,233 ops/s\u000a    total: 74,186 ops in 5.015s\u000a  through: 462.28 mb/s\u000a\u000a```\u000a\u000a## What's it good for?\u000a\u000a  Axon are not meant to combat zeromq nor provide feature parity,\u000a  but provide a nice solution when you don't need the insane\u000a  nanosecond latency or language interoperability that zeromq provides\u000a  as axon do not rely on any third-party compiled libraries.\u000a\u000a## Running tests\u000a\u000a```\u000a$ npm install\u000a$ make test\u000a```\u000a\u000a## Authors\u000a\u000a  - [visionmedia](http://github.com/visionmedia)\u000a  - [gjohnson](https://github.com/gjohnson)\u000a\u000a## Links\u000a\u000a  - [Screencast](https://vimeo.com/45818408)\u000a  - [Axon RPC](https://github.com/visionmedia/axon-rpc)\u000a\u000a## License\u000a\u000a  MIT\u000a","readmeFilename":"Readme.md","gitHead":"c1b8d0cd39d4f546ce954094dbb441ae4effd00d","bugs":{"url":"https://github.com/visionmedia/axon/issues"},"homepage":"https://github.com/visionmedia/axon","_id":"pm2-axon@2.0.5","_shasum":"6535c37443e87fc5a4dbaf978f9ce27c43045ce1","_from":".","_npmVersion":"2.0.0","_npmUser":{"name":"tknew","email":"strzelewicz.alexandre@gmail.com"},"maintainers":[{"name":"tknew","email":"strzelewicz.alexandre@gmail.com"}],"dist":{"shasum":"6535c37443e87fc5a4dbaf978f9ce27c43045ce1","tarball":"http://registry.npmjs.org/pm2-axon/-/pm2-axon-2.0.5.tgz"}}: pm2-axon
45 verbose stack     at RegClient.<anonymous> (/home/shant/.nvm/v0.11.14/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:261:14)
45 verbose stack     at Request._callback (/home/shant/.nvm/v0.11.14/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:198:65)
45 verbose stack     at Request.self.callback (/home/shant/.nvm/v0.11.14/lib/node_modules/npm/node_modules/request/request.js:236:22)
45 verbose stack     at Request.emit (events.js:110:17)
45 verbose stack     at Request.<anonymous> (/home/shant/.nvm/v0.11.14/lib/node_modules/npm/node_modules/request/request.js:1142:14)
45 verbose stack     at Request.emit (events.js:129:20)
45 verbose stack     at IncomingMessage.<anonymous> (/home/shant/.nvm/v0.11.14/lib/node_modules/npm/node_modules/request/request.js:1096:12)
45 verbose stack     at IncomingMessage.emit (events.js:129:20)
45 verbose stack     at _stream_readable.js:907:16
45 verbose stack     at process._tickCallback (node.js:372:11)
46 verbose statusCode 403
47 verbose pkgid pm2-axon
48 verbose cwd /home/shant/keymetrics/pm2-axon
49 error Linux 3.13.0-36-generic
50 error argv "/home/shant/.nvm/v0.11.14/bin/node" "/home/shant/.nvm/v0.11.14/bin/npm" "publish"
51 error node v0.11.14
52 error npm  v2.0.0
53 error code E403
54 error forbidden cannot modify pre-existing version: 2.0.5
54 error old={"name":"pm2-axon","description":"High-level messaging & socket patterns implemented in pure js","version":"2.0.5","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"debug":"~2.0.0","configurable":"0.0.1","escape-regexp":"0.0.1","amp-message":"~0.1.1","amp":"~0.3.1"},"devDependencies":{"better-assert":"*","should":"*","mocha":"*","commander":"*","humanize-number":"0.0.1"},"keywords":["zmq","zeromq","pubsub","socket","emitter","ipc","rpc"],"repository":{"type":"git","url":"https://github.com/visionmedia/axon.git"},"scripts":{"test":"make test"},"license":"MIT","gitHead":"c1b8d0cd39d4f546ce954094dbb441ae4effd00d","bugs":{"url":"https://github.com/visionmedia/axon/issues"},"homepage":"https://github.com/visionmedia/axon","_id":"pm2-axon@2.0.5","_shasum":"6535c37443e87fc5a4dbaf978f9ce27c43045ce1","_from":".","_npmVersion":"2.0.0","_npmUser":{"name":"tknew","email":"strzelewicz.alexandre@gmail.com"},"maintainers":[{"name":"tknew","email":"strzelewicz.alexandre@gmail.com"}],"dist":{"shasum":"6535c37443e87fc5a4dbaf978f9ce27c43045ce1","tarball":"http://registry.npmjs.org/pm2-axon/-/pm2-axon-2.0.5.tgz"}}
54 error new={"name":"pm2-axon","description":"High-level messaging & socket patterns implemented in pure js","version":"2.0.5","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"debug":"~2.0.0","configurable":"0.0.1","escape-regexp":"0.0.1","amp-message":"~0.1.1","amp":"~0.3.1"},"devDependencies":{"better-assert":"*","should":"*","mocha":"*","commander":"*","humanize-number":"0.0.1"},"keywords":["zmq","zeromq","pubsub","socket","emitter","ipc","rpc"],"repository":{"type":"git","url":"https://github.com/visionmedia/axon.git"},"scripts":{"test":"make test"},"license":"MIT","readme":"# Axon\u000a\u000a  Axon is a message-oriented socket library for node.js heavily inspired by zeromq. For a light-weight\u000a  UDP alternative you may be interested in [punt](https://github.com/visionmedia/punt).\u000a\u000a[![Build Status](https://travis-ci.org/unitech/pm2-axon.png)](https://travis-ci.org/unitech/pm2-axon)\u000a\u000a## Installation\u000a\u000a    $ npm install axon\u000a\u000a## Features\u000a\u000a  - message oriented\u000a  - automated reconnection\u000a  - light-weight wire protocol\u000a  - mixed-type arguments (strings, objects, buffers, etc)\u000a  - unix domain socket support\u000a  - fast (~800 mb/s ~500,000 messages/s)\u000a\u000a## Events\u000a\u000a  - `close` when server or connection is closed\u000a  - `error` (err) when an un-handled socket error occurs\u000a  - `ignored error` (err) when an axon-handled socket error occurs, but is ignored\u000a  - `socket error` (err) emitted regardless of handling, for logging purposes\u000a  - `reconnect attempt` when a reconnection attempt is made\u000a  - `connect` when connected to the peer, or a peer connection is accepted\u000a  - `disconnect` when an accepted peer disconnects\u000a  - `bind` when the server is bound\u000a  - `drop` (msg) when a message is dropped due to the HWM\u000a  - `flush` (msgs) queued when messages are flushed on connection\u000a\u000a## Patterns\u000a\u000a  - push / pull\u000a  - pub / sub\u000a  - req / rep\u000a  - pub-emitter / sub-emitter\u000a\u000a## Mixed argument types\u000a\u000a  Backed by [node-amp-message](https://github.com/visionmedia/node-amp-message)\u000a  you may pass strings, objects, and buffers as arguments.\u000a\u000a```js\u000apush.send('image', { w: 100, h: 200 }, imageBuffer);\u000apull.on('message', function(type, size, img){});\u000a```\u000a\u000a## Push / Pull\u000a\u000a`PushSocket`s distribute messages round-robin:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('push');\u000a\u000asock.bind(3000);\u000aconsole.log('push server started');\u000a\u000asetInterval(function(){\u000a  sock.send('hello');\u000a}, 150);\u000a```\u000a\u000aReceiver of `PushSocket` messages:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('pull');\u000a\u000asock.connect(3000);\u000a\u000asock.on('message', function(msg){\u000a  console.log(msg.toString());\u000a});\u000a```\u000a\u000a\u000aBoth `PushSocket`s and `PullSocket`s may `.bind()` or `.connect()`. In the\u000afollowing configuration the push socket is bound and pull \"workers\" connect\u000ato it to receive work:\u000a\u000a![push bind](http://f.cl.ly/items/473u3m1a0k1i0J0I3s04/ss-push.png)\u000a\u000aThis configuration shows the inverse, where workers connect to a \"sink\"\u000ato push results:\u000a\u000a![pull bind](http://f.cl.ly/items/3Y0j2v153Q0l1r373i0H/ss-pull.png)\u000a\u000a## Pub / Sub\u000a\u000a`PubSocket`s send messages to all subscribers without queueing. This is an\u000aimportant difference when compared to a `PushSocket`, where the delivery of\u000amessages will be queued during disconnects and sent again upon the next connection.\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('pub');\u000a\u000asock.bind(3000);\u000aconsole.log('pub server started');\u000a\u000asetInterval(function(){\u000a  sock.send('hello');\u000a}, 500);\u000a```\u000a\u000a`SubSocket` simply receives any messages from a `PubSocket`:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('sub');\u000a\u000asock.connect(3000);\u000a\u000asock.on('message', function(msg){\u000a  console.log(msg.toString());\u000a});\u000a```\u000a\u000a `SubSocket`s may optionally `.subscribe()` to one or more \"topics\" (the first multipart value),\u000a using string patterns or regular expressions:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('sub');\u000a\u000asock.connect(3000);\u000asock.subscribe('user:login');\u000asock.subscribe('upload:*:progress');\u000a\u000asock.on('message', function(topic, msg){\u000a\u000a});\u000a```\u000a\u000a## Req / Rep\u000a\u000a`ReqSocket` is similar to a `PushSocket` in that it round-robins messages\u000ato connected `RepSocket`s, however it differs in that this communication is\u000abi-directional, every `req.send()` _must_ provide a callback which is invoked\u000awhen the `RepSocket` replies.\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('req');\u000a\u000asock.bind(3000);\u000a\u000asock.send(img, function(res){\u000a\u000a});\u000a```\u000a\u000a`RepSocket`s receive a `reply` callback that is used to respond to the request,\u000ayou may have several of these nodes.\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('rep');\u000a\u000asock.connect(3000);\u000a\u000asock.on('message', function(img, reply){\u000a  // resize the image\u000a  reply(img);\u000a});\u000a```\u000a\u000a Like other sockets you may provide multiple arguments or an array of arguments,\u000a followed by the callbacks. For example here we provide a task name of \"resize\"\u000a to facilitate multiple tasks over a single socket:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('req');\u000a\u000asock.bind(3000);\u000a\u000asock.send('resize', img, function(res){\u000a\u000a});\u000a```\u000a\u000a Respond to the \"resize\" task:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('rep');\u000a\u000asock.connect(3000);\u000a\u000asock.on('message', function(task, img, reply){\u000a  switch (task) {\u000a    case 'resize':\u000a      // resize the image\u000a      reply(img);\u000a      break;\u000a  }\u000a});\u000a```\u000a\u000a## PubEmitter / SubEmitter\u000a\u000a  `PubEmitter` and `SubEmitter` are higher-level `Pub` / `Sub` sockets, using the \"json\" codec to behave much like node's `EventEmitter`. When a `SubEmitter`'s `.on()` method is invoked, the event name is `.subscribe()`d for you. Each wildcard (`*`) or regexp capture group is passed to the callback along with regular message arguments.\u000a\u000aapp.js:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('pub-emitter');\u000a\u000asock.connect(3000);\u000a\u000asetInterval(function(){\u000a  sock.emit('login', { name: 'tobi' });\u000a}, 500);\u000a```\u000a\u000alogger.js:\u000a\u000a```js\u000avar axon = require('axon');\u000avar sock = axon.socket('sub-emitter');\u000a\u000asock.bind(3000);\u000a\u000asock.on('user:login', function(user){\u000a  console.log('%s signed in', user.name);\u000a});\u000a\u000asock.on('user:*', function(action, user){\u000a  console.log('%s %s', user.name, action);\u000a});\u000a\u000asock.on('*', function(event){\u000a  console.log(arguments);\u000a});\u000a```\u000a\u000a## Socket Options\u000a\u000aEvery socket has associated options that can be configured via `get/set`.\u000a\u000a  - `identity` - the \"name\" of the socket that uniqued identifies it.\u000a  - `retry timeout` - connection retry timeout in milliseconds [100]\u000a  - `retry max timeout` - the cap for retry timeout length in milliseconds [5000]\u000a  - `hwm` - the high water mark threshold for queues [Infinity]\u000a\u000a## Binding / Connecting\u000a\u000aIn addition to passing a portno, binding to INADDR_ANY by default, you\u000amay also specify the hostname via `.bind(port, host)`, another alternative\u000ais to specify the url much like zmq via `tcp://<hostname>:<portno>`, thus\u000athe following are equivalent:\u000a\u000a```\u000asock.bind(3000)\u000asock.bind(3000, '0.0.0.0')\u000asock.bind('tcp://0.0.0.0:3000')\u000a\u000asock.connect(3000)\u000asock.connect(3000, '0.0.0.0')\u000asock.connect('tcp://0.0.0.0:3000')\u000a```\u000a\u000a  You may also use unix domain sockets:\u000a\u000a```\u000asock.bind('unix:///some/path')\u000asock.connect('unix:///some/path')\u000a```\u000a\u000a## Protocol\u000a\u000a  Axon 2.x uses the extremely simple [AMP](https://github.com/visionmedia/node-amp) protocol to send messages on the wire. Codecs are no longer required as they were in Axon 1.x.\u000a\u000a## Performance\u000a\u000aPreliminary benchmarks on my Macbook Pro based on 10 messages\u000aper tick as a realistic production application would likely have\u000aeven less than this. \"better\" numbers may be acheived with batching\u000aand a larger messages/tick count however this is not realistic.\u000a\u000a  64 byte messages:\u000a\u000a```\u000a\u000a      min: 47,169 ops/s\u000a     mean: 465,127 ops/s\u000a   median: 500,000 ops/s\u000a    total: 2,325,636 ops in 5s\u000a  through: 28.39 mb/s\u000a\u000a```\u000a\u000a  1k messages:\u000a\u000a```\u000a\u000a      min: 48,076 ops/s\u000a     mean: 120,253 ops/s\u000a   median: 121,951 ops/s\u000a    total: 601,386 ops in 5.001s\u000a  through: 117.43 mb/s\u000a\u000a```\u000a\u000a  8k messages:\u000a\u000a```\u000a\u000a      min: 36,496 ops/s\u000a     mean: 53,194 ops/s\u000a   median: 50,505 ops/s\u000a    total: 266,506 ops in 5.01s\u000a  through: 405.84 mb/s\u000a\u000a````\u000a\u000a  32k messages:\u000a\u000a```\u000a\u000a      min: 12,077 ops/s\u000a     mean: 14,792 ops/s\u000a   median: 16,233 ops/s\u000a    total: 74,186 ops in 5.015s\u000a  through: 462.28 mb/s\u000a\u000a```\u000a\u000a## What's it good for?\u000a\u000a  Axon are not meant to combat zeromq nor provide feature parity,\u000a  but provide a nice solution when you don't need the insane\u000a  nanosecond latency or language interoperability that zeromq provides\u000a  as axon do not rely on any third-party compiled libraries.\u000a\u000a## Running tests\u000a\u000a```\u000a$ npm install\u000a$ make test\u000a```\u000a\u000a## Authors\u000a\u000a  - [visionmedia](http://github.com/visionmedia)\u000a  - [gjohnson](https://github.com/gjohnson)\u000a\u000a## Links\u000a\u000a  - [Screencast](https://vimeo.com/45818408)\u000a  - [Axon RPC](https://github.com/visionmedia/axon-rpc)\u000a\u000a## License\u000a\u000a  MIT\u000a","readmeFilename":"Readme.md","gitHead":"c1b8d0cd39d4f546ce954094dbb441ae4effd00d","bugs":{"url":"https://github.com/visionmedia/axon/issues"},"homepage":"https://github.com/visionmedia/axon","_id":"pm2-axon@2.0.5","_shasum":"6535c37443e87fc5a4dbaf978f9ce27c43045ce1","_from":".","_npmVersion":"2.0.0","_npmUser":{"name":"tknew","email":"strzelewicz.alexandre@gmail.com"},"maintainers":[{"name":"tknew","email":"strzelewicz.alexandre@gmail.com"}],"dist":{"shasum":"6535c37443e87fc5a4dbaf978f9ce27c43045ce1","tarball":"http://registry.npmjs.org/pm2-axon/-/pm2-axon-2.0.5.tgz"}}: pm2-axon
55 error If you need help, you may report this error at:
55 error     <http://github.com/npm/npm/issues>
56 verbose exit [ 1, true ]
